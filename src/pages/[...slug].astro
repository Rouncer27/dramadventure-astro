---
import type { GetStaticPaths } from "astro";
import Layout from "../layouts/Layout.astro";
import BlockRenderer from "../Renderers/BlockRenderer.astro";

export async function getStaticPaths() {
  const response = await fetch(`${import.meta.env.WPGRAPHQL_URL}`, {
    method: "POST",
    headers: {
      "content-type": "application/json",
    },
    body: JSON.stringify({
      query: `
          query allPages {
            pages(first: 9999999) {
              nodes {
                uri
              }
            }
          }
      `,
    }),
  });

  const { data } = await response.json();
  return data.pages.nodes.map((page) => {
    return {
      params: { slug: page.uri === "/" ? undefined : page.uri },
      props: { trevor: "rounce" },
    };
  });
}

const response = await fetch(`${import.meta.env.WPGRAPHQL_URL}`, {
  method: "POST",
  headers: {
    "content-type": "application/json",
  },
  body: JSON.stringify({
    query: `
    query PageQuery($uri: String!) {
      nodeByUri(uri: $uri) {
        ... on Page {
          id
          slug
          title
          pageComponents {
            components {
              ... on Page_Pagecomponents_Components_Hero {
                fieldGroupName
                heroContent {
                  boxColour
                  fieldGroupName
                  title
                  button {
                    buttonText
                    buttonType
                    buttonUrl
                    pageLink {
                      ... on Page {
                        id
                        link
                      }
                    }
                  }
                }
                heroImage {
                  sourceUrl
                }
              }

              ... on Page_Pagecomponents_Components_SearchWhiskies {
                displayWhiskiesSearch
                fieldGroupName
              }

              ... on Page_Pagecomponents_Components_WysiwygContent {
                fieldGroupName
                mainContent
              }

              ... on Page_Pagecomponents_Components_ReviewSlider {
                displayReviewSlider
                fieldGroupName
              }


              ... on Page_Pagecomponents_Components_ThreeBlocks {
                fieldGroupName
                imageLeft {
                  sourceUrl
                }
                imageRight {
                  sourceUrl
                }
                content {
                  bigContent
                  logoOrIcon {
                    sourceUrl
                  }
                  pageLinkOne {
                    ... on Page {
                      title
                      link
                    }
                    ... on Post {
                      title
                      link
                    }
                    ... on SpritReview {
                      title
                      link
                    }
                    ... on Whiskey {
                      title
                      link
                    }
                  }
                  pageLinkTwo {
                    ... on Page {
                      title
                      link
                    }
                    ... on Post {
                      title
                      link
                    }
                    ... on SpritReview {
                      title
                      link
                    }
                    ... on Whiskey {
                      title
                      link
                    }
                  }
                }
              }
              ... on Page_Pagecomponents_Components_DisplayLatestPosts {
                displayLatestPosts
                fieldGroupName
                title
              }

              ... on Page_Pagecomponents_Components_DramQuote {
                author
                fieldGroupName
                quote
                logoOrIcon {
                  sourceUrl
                }
              }
            }
          }
        }
      }

      spritsReviews {
        nodes {
          title
          reviewsContent {
            featuredImage {
              sourceUrl
            }
          }
        }
      }

    }
  `,
    variables: {
      uri: Astro.params["slug"] || "/",
    },
  }),
});

const { data } = await response.json();
const blocks = data.nodeByUri.pageComponents.components;
const reviews = data.spritsReviews.nodes;
---

<Layout title="Welcome to Astro.">
  <main>
    <BlockRenderer blocks={blocks} reviews={reviews} />
  </main>
</Layout>
